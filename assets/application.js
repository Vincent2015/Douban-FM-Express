// Generated by CoffeeScript 1.7.1
(function() {
  var API_HOST, AUTH_URL, Application, CHANNELS_URL, PLAYLIST_URL, app_name, d, player, version;

  plyr.setup();

  player = document.querySelectorAll(".player")[0].plyr;

  player.play();

  $(".player-volume").on("input", function(e) {
    var max, min, val;
    min = e.target.min;
    max = e.target.max;
    val = e.target.value;
    return $(e.target).css({
      "backgroundSize": (val - min) * 100 / (max - min) + "% 100%"
    });
  }).trigger('input');

  $(".controls .icon.play").click(function() {
    return player.play();
  });

  $(".controls .icon.pause").click(function() {
    return player.pause();
  });

  API_HOST = "http://www.douban.com";

  CHANNELS_URL = API_HOST + "/j/app/radio/channels";

  AUTH_URL = API_HOST + "/j/app/login";

  PLAYLIST_URL = API_HOST + "/j/app/radio/people";

  app_name = "radio_desktop_win";

  version = 100;

  Application = Application = (function() {
    function Application() {
      this.channel = 1;
      this.user_id = null;
      this.token = null;
      this.expire = null;
      this.email = null;
      this.user_name = null;
      this.sid = null;
      this.history = [];
    }

    Application.prototype.fetchChannels = function() {
      return $.ajax(CHANNELS_URL);
    };

    Application.prototype.login = function(email, password) {
      var defer, self;
      self = this;
      defer = new Q.defer();
      if (!email || !password) {
        defer.reject({
          err: "Both email and password are needed!"
        });
      } else {
        $.post(AUTH_URL, {
          app_name: app_name,
          version: version,
          email: email,
          password: password
        }).done(function(result) {
          console.log(result);
          if (result.r) {
            return defer.reject(result.err);
          } else {
            self.user_id = result.user_id;
            self.token = result.token;
            self.expire = result.expire;
            self.email = result.email;
            self.user_name = result.user_name;
            return defer.resolve(result);
          }
        });
      }
      return defer.promise;
    };

    Application.prototype.fetchSong = function(type, shouldPlay) {
      var channel, data, defer, self;
      if (type == null) {
        type = "n";
      }
      console.log("Fetching");
      self = this;
      defer = new Q.defer();
      if (type !== "b" && type !== "e" && type !== "n" && type !== "p" && type !== "s" && type !== "r" && type !== "s" && type !== "u") {
        defer.reject({
          err: "Type Error!"
        });
      } else {
        channel = this.channel;
        data = {
          app_name: app_name,
          version: version,
          type: type,
          channel: channel
        };
        if (this.user_id && this.token && this.expire) {
          data.user_id = this.user_id;
          data.token = this.token;
          data.expire = this.expire;
        }
        if (type !== "n" && type !== "p") {
          data.sid = this.sid;
        }
        if (type === "p") {
          data.h = this.getHistory();
        }
        $.get(PLAYLIST_URL, data).done(function(result) {
          console.log("Fetched....");
          if (result.r) {
            return defer.reject(result.err);
          } else {
            self.songList = result.song;
            if (shouldPlay) {
              self.play(result.song[0]);
            }
            return defer.resolve(result.song);
          }
        });
      }
      return defer.promise;
    };

    Application.prototype.addHistory = function(sid, type) {
      return this.history.push("" + sid + ":" + type);
    };

    Application.prototype.getHistory = function() {
      return "|" + this.history.join("|");
    };

    Application.prototype.clearHistory = function() {
      return this.history = [];
    };

    Application.prototype.play = function(song) {
      console.log("play");
      if (!song) {
        return player.play();
      } else {
        this.toggleStar(song);
        player.source(song.url);
        this.sid = song.sid;
        this.song = song;
        player.play();
        return this.setAlbum(song);
      }
    };

    Application.prototype.setAlbum = function(song) {
      var pic;
      pic = song.picture.replace("mpic", 'lpic');
      return $(".album img").attr('src', pic);
    };

    Application.prototype.toggleStar = function(song) {
      var star;
      star = !!song.like;
      return $(".player").toggleClass("like", star);
    };

    return Application;

  })();

  d = new Application();

  d.fetchSong("n", true);

}).call(this);
